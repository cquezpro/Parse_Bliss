LoginForm = BlissForm.extend({
  name: 'LoginForm',
  dataClass: 'dummy',
  modelClass: StorageModel,
  bodyClasses: 'page-userAccess',
  completionMessage: 'You\'ve logged in successfully', 
  ignoreUnsaved: true,
  templates: function() {
    var user = User.current();
    //Because we auto-create accounts, show user as logged out
    //unless their account has been manually created
    if (User.current() && User.current().get('manually_created')) {
      return ['LoginFormLoggedIn.tpl.htm'];
    }
    else {
      return ['LoginForm.tpl.htm'];
    }
  },
  fields: {
    BlissEmail: {defaultValue: '', dataType: 'string', required: true},
    BlissPassword: {defaultValue: '', dataType: 'string', required: true, submitOnEnter: true},
  },
  PreRender: function() {
    var username = Storage.get('username');
    //Only use username if it's a user set email address
    //not our autogenerated random string username for auto-account creation
    if (username && username.indexOf('@') != -1) {
      this.getModel().set('BlissEmail', Storage.get('username'));
    }
  },
  PostRender: function() {
    var that = this;
    if ($('#BlissEmail').val()) {
      $('#BlissPassword').focus();
    }
    else {
      $('#BlissEmail').focus();
    }
    $('#BlissPassword').keyup(function(e){
     if (e.which == 13) {
       that.save()    
     }
    });
    this.$el.find('.logout').click(function(){
      User.logOut();
      Storage.remove('pass');
      location.reload();
    });
  },
  //Over-ride save method - we're dealing with User object which is special
  save: function(callback) {
    var that     = this;
    var email    = this.getModel().get('BlissEmail');
    var username = email;
    var password = this.getModel().get('BlissPassword');
    Parse.User.logIn(email, password, {
      success: function(user) {
        Storage.set({username: username, pass: password});
        user.set('manually_created', true);
        user.save(
          {
            error: function(user, error) {
              Bliss.logError(error, 'parse-manually-created'); 
          }
        });
        Bliss.message('Logged in Successfully');
        that.bliss_exit = true;
        var redirect = Bliss.getUrlParam('redirect')
        if (redirect) {
          window.location.href = Bliss.getExerciseUrl(redirect);
        }
        else {
          location.reload();
        }
      },
      error: function(user, error) {
        Bliss.logError(error, 'parse-login');
        var message;
        switch (error.code) {
          case 101: //invalid username / pass
            message = 'Your username / password is incorrect';
            $('#BlissPassword').focus();
            break;
          default:
            message = error.message;
        }
        Bliss.message(message);
      }
    });
  }
});
